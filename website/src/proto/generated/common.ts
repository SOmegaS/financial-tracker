/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.30.2
 * source: common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\protobuf\\timestamp";
import * as dependency_2 from "./google\\protobuf\\empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export namespace api {
    export class RegisterRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requestId?: string;
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set requestId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            requestId?: string;
            username?: string;
            password?: string;
        }): RegisterRequest {
            const message = new RegisterRequest({});
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                requestId?: string;
                username?: string;
                password?: string;
            } = {};
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requestId.length)
                writer.writeString(1, this.requestId);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.requestId = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterRequest {
            return RegisterRequest.deserialize(bytes);
        }
    }
    export class RegisterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            jwt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("jwt" in data && data.jwt != undefined) {
                    this.jwt = data.jwt;
                }
            }
        }
        get jwt() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set jwt(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            jwt?: string;
        }): RegisterResponse {
            const message = new RegisterResponse({});
            if (data.jwt != null) {
                message.jwt = data.jwt;
            }
            return message;
        }
        toObject() {
            const data: {
                jwt?: string;
            } = {};
            if (this.jwt != null) {
                data.jwt = this.jwt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.jwt.length)
                writer.writeString(1, this.jwt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.jwt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterResponse {
            return RegisterResponse.deserialize(bytes);
        }
    }
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requestId?: string;
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set requestId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            requestId?: string;
            username?: string;
            password?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                requestId?: string;
                username?: string;
                password?: string;
            } = {};
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requestId.length)
                writer.writeString(1, this.requestId);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.requestId = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class LoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            jwt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("jwt" in data && data.jwt != undefined) {
                    this.jwt = data.jwt;
                }
            }
        }
        get jwt() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set jwt(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            jwt?: string;
        }): LoginResponse {
            const message = new LoginResponse({});
            if (data.jwt != null) {
                message.jwt = data.jwt;
            }
            return message;
        }
        toObject() {
            const data: {
                jwt?: string;
            } = {};
            if (this.jwt != null) {
                data.jwt = this.jwt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.jwt.length)
                writer.writeString(1, this.jwt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.jwt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginResponse {
            return LoginResponse.deserialize(bytes);
        }
    }
    export class CreateBillMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            amount?: number;
            category?: string;
            user_id?: string;
            timestamp?: dependency_1.google.protobuf.Timestamp;
            jwt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("jwt" in data && data.jwt != undefined) {
                    this.jwt = data.jwt;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get jwt() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set jwt(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            name?: string;
            amount?: number;
            category?: string;
            user_id?: string;
            timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            jwt?: string;
        }): CreateBillMessage {
            const message = new CreateBillMessage({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.jwt != null) {
                message.jwt = data.jwt;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                amount?: number;
                category?: string;
                user_id?: string;
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                jwt?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.jwt != null) {
                data.jwt = this.jwt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.amount != 0)
                writer.writeDouble(2, this.amount);
            if (this.category.length)
                writer.writeString(3, this.category);
            if (this.user_id.length)
                writer.writeString(4, this.user_id);
            if (this.has_timestamp)
                writer.writeMessage(5, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.jwt.length)
                writer.writeString(6, this.jwt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateBillMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateBillMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.amount = reader.readDouble();
                        break;
                    case 3:
                        message.category = reader.readString();
                        break;
                    case 4:
                        message.user_id = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        message.jwt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateBillMessage {
            return CreateBillMessage.deserialize(bytes);
        }
    }
    export class GetReportRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            jwt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("jwt" in data && data.jwt != undefined) {
                    this.jwt = data.jwt;
                }
            }
        }
        get jwt() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set jwt(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            jwt?: string;
        }): GetReportRequest {
            const message = new GetReportRequest({});
            if (data.jwt != null) {
                message.jwt = data.jwt;
            }
            return message;
        }
        toObject() {
            const data: {
                jwt?: string;
            } = {};
            if (this.jwt != null) {
                data.jwt = this.jwt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.jwt.length)
                writer.writeString(1, this.jwt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetReportRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetReportRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.jwt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetReportRequest {
            return GetReportRequest.deserialize(bytes);
        }
    }
    export class GetReportResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            report?: Map<string, number>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("report" in data && data.report != undefined) {
                    this.report = data.report;
                }
            }
            if (!this.report)
                this.report = new Map();
        }
        get report() {
            return pb_1.Message.getField(this, 1) as any as Map<string, number>;
        }
        set report(value: Map<string, number>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            report?: {
                [key: string]: number;
            };
        }): GetReportResponse {
            const message = new GetReportResponse({});
            if (typeof data.report == "object") {
                message.report = new Map(Object.entries(data.report));
            }
            return message;
        }
        toObject() {
            const data: {
                report?: {
                    [key: string]: number;
                };
            } = {};
            if (this.report != null) {
                data.report = (Object.fromEntries)(this.report);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.report) {
                writer.writeMessage(1, this.report, () => {
                    writer.writeString(1, key);
                    writer.writeDouble(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetReportResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetReportResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.report as any, reader, reader.readString, reader.readDouble));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetReportResponse {
            return GetReportResponse.deserialize(bytes);
        }
    }
    export class GetBillsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            jwt?: string;
            category?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("jwt" in data && data.jwt != undefined) {
                    this.jwt = data.jwt;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
            }
        }
        get jwt() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set jwt(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            jwt?: string;
            category?: string;
        }): GetBillsRequest {
            const message = new GetBillsRequest({});
            if (data.jwt != null) {
                message.jwt = data.jwt;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            return message;
        }
        toObject() {
            const data: {
                jwt?: string;
                category?: string;
            } = {};
            if (this.jwt != null) {
                data.jwt = this.jwt;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.jwt.length)
                writer.writeString(1, this.jwt);
            if (this.category.length)
                writer.writeString(2, this.category);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBillsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBillsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.jwt = reader.readString();
                        break;
                    case 2:
                        message.category = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBillsRequest {
            return GetBillsRequest.deserialize(bytes);
        }
    }
    export class Bill extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: number;
            name?: string;
            ts?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("ts" in data && data.ts != undefined) {
                    this.ts = data.ts;
                }
            }
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ts() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set ts(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_ts() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            amount?: number;
            name?: string;
            ts?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): Bill {
            const message = new Bill({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.ts != null) {
                message.ts = dependency_1.google.protobuf.Timestamp.fromObject(data.ts);
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: number;
                name?: string;
                ts?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.ts != null) {
                data.ts = this.ts.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount != 0)
                writer.writeDouble(1, this.amount);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_ts)
                writer.writeMessage(3, this.ts, () => this.ts.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bill {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Bill();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readDouble();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.ts, () => message.ts = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Bill {
            return Bill.deserialize(bytes);
        }
    }
    export class GetBillsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            bills?: Bill[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bills" in data && data.bills != undefined) {
                    this.bills = data.bills;
                }
            }
        }
        get bills() {
            return pb_1.Message.getRepeatedWrapperField(this, Bill, 1) as Bill[];
        }
        set bills(value: Bill[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            bills?: ReturnType<typeof Bill.prototype.toObject>[];
        }): GetBillsResponse {
            const message = new GetBillsResponse({});
            if (data.bills != null) {
                message.bills = data.bills.map(item => Bill.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                bills?: ReturnType<typeof Bill.prototype.toObject>[];
            } = {};
            if (this.bills != null) {
                data.bills = this.bills.map((item: Bill) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.bills.length)
                writer.writeRepeatedMessage(1, this.bills, (item: Bill) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBillsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBillsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.bills, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Bill.deserialize(reader), Bill));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBillsResponse {
            return GetBillsResponse.deserialize(bytes);
        }
    }
    export abstract class UnimplementedApiService {
        static definition = {
            Register: {
                path: "/api.Api/Register",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegisterResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegisterResponse.deserialize(new Uint8Array(bytes))
            },
            Login: {
                path: "/api.Api/Login",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            CreateBill: {
                path: "/api.Api/CreateBill",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateBillMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateBillMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            GetReport: {
                path: "/api.Api/GetReport",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetReportRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetReportRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetReportResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetReportResponse.deserialize(new Uint8Array(bytes))
            },
            GetBills: {
                path: "/api.Api/GetBills",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBillsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBillsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetBillsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetBillsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Register(call: grpc_1.ServerUnaryCall<RegisterRequest, RegisterResponse>, callback: grpc_1.sendUnaryData<RegisterResponse>): void;
        abstract Login(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract CreateBill(call: grpc_1.ServerUnaryCall<CreateBillMessage, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract GetReport(call: grpc_1.ServerUnaryCall<GetReportRequest, GetReportResponse>, callback: grpc_1.sendUnaryData<GetReportResponse>): void;
        abstract GetBills(call: grpc_1.ServerUnaryCall<GetBillsRequest, GetBillsResponse>, callback: grpc_1.sendUnaryData<GetBillsResponse>): void;
    }
    export class ApiClient {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static Register = new grpc_web_1.MethodDescriptor<RegisterRequest, RegisterResponse>("/api.Api/Register", grpc_web_1.MethodType.UNARY, RegisterRequest, RegisterResponse, (message: RegisterRequest) => message.serialize(), RegisterResponse.deserialize);
        Register(message: RegisterRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: RegisterResponse) => void) {
            return this._client.rpcCall<RegisterRequest, RegisterResponse>(this._address + "/api.Api/Register", message, metadata || {}, ApiClient.Register, callback);
        }
        private static Login = new grpc_web_1.MethodDescriptor<LoginRequest, LoginResponse>("/api.Api/Login", grpc_web_1.MethodType.UNARY, LoginRequest, LoginResponse, (message: LoginRequest) => message.serialize(), LoginResponse.deserialize);
        Login(message: LoginRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: LoginResponse) => void) {
            return this._client.rpcCall<LoginRequest, LoginResponse>(this._address + "/api.Api/Login", message, metadata || {}, ApiClient.Login, callback);
        }
        private static CreateBill = new grpc_web_1.MethodDescriptor<CreateBillMessage, dependency_2.google.protobuf.Empty>("/api.Api/CreateBill", grpc_web_1.MethodType.UNARY, CreateBillMessage, dependency_2.google.protobuf.Empty, (message: CreateBillMessage) => message.serialize(), dependency_2.google.protobuf.Empty.deserialize);
        CreateBill(message: CreateBillMessage, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_2.google.protobuf.Empty) => void) {
            return this._client.rpcCall<CreateBillMessage, dependency_2.google.protobuf.Empty>(this._address + "/api.Api/CreateBill", message, metadata || {}, ApiClient.CreateBill, callback);
        }
        private static GetReport = new grpc_web_1.MethodDescriptor<GetReportRequest, GetReportResponse>("/api.Api/GetReport", grpc_web_1.MethodType.UNARY, GetReportRequest, GetReportResponse, (message: GetReportRequest) => message.serialize(), GetReportResponse.deserialize);
        GetReport(message: GetReportRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: GetReportResponse) => void) {
            return this._client.rpcCall<GetReportRequest, GetReportResponse>(this._address + "/api.Api/GetReport", message, metadata || {}, ApiClient.GetReport, callback);
        }
        private static GetBills = new grpc_web_1.MethodDescriptor<GetBillsRequest, GetBillsResponse>("/api.Api/GetBills", grpc_web_1.MethodType.UNARY, GetBillsRequest, GetBillsResponse, (message: GetBillsRequest) => message.serialize(), GetBillsResponse.deserialize);
        GetBills(message: GetBillsRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: GetBillsResponse) => void) {
            return this._client.rpcCall<GetBillsRequest, GetBillsResponse>(this._address + "/api.Api/GetBills", message, metadata || {}, ApiClient.GetBills, callback);
        }
    }
}
