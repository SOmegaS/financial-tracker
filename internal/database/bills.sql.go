// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bills.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBill = `-- name: CreateBill :exec
INSERT INTO bills (id, user_id, amount, category_name, ts)
VALUES (gen_random_uuid(), $1, $2, $3, $4)
`

type CreateBillParams struct {
	UserID       sql.NullString
	Amount       sql.NullInt32
	CategoryName sql.NullString
	Ts           sql.NullTime
}

func (q *Queries) CreateBill(ctx context.Context, arg CreateBillParams) error {
	_, err := q.db.ExecContext(ctx, createBill,
		arg.UserID,
		arg.Amount,
		arg.CategoryName,
		arg.Ts,
	)
	return err
}

const deleteBill = `-- name: DeleteBill :exec
DELETE FROM bills
WHERE id = $1
`

func (q *Queries) DeleteBill(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBill, id)
	return err
}

const deleteBillsByCategory = `-- name: DeleteBillsByCategory :exec
DELETE FROM bills
WHERE user_id = $1
AND category_name = $2
`

type DeleteBillsByCategoryParams struct {
	UserID       sql.NullString
	CategoryName sql.NullString
}

func (q *Queries) DeleteBillsByCategory(ctx context.Context, arg DeleteBillsByCategoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteBillsByCategory, arg.UserID, arg.CategoryName)
	return err
}

const deleteBillsByUser = `-- name: DeleteBillsByUser :exec
DELETE FROM bills
WHERE user_id = $1
`

func (q *Queries) DeleteBillsByUser(ctx context.Context, userID sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteBillsByUser, userID)
	return err
}

const listBills = `-- name: ListBills :many
SELECT amount, category_name
FROM bills
WHERE user_id = $1
AND ts > $2
AND ts < $3
`

type ListBillsParams struct {
	UserID sql.NullString
	Ts     sql.NullTime
	Ts_2   sql.NullTime
}

type ListBillsRow struct {
	Amount       sql.NullInt32
	CategoryName sql.NullString
}

func (q *Queries) ListBills(ctx context.Context, arg ListBillsParams) ([]ListBillsRow, error) {
	rows, err := q.db.QueryContext(ctx, listBills, arg.UserID, arg.Ts, arg.Ts_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBillsRow
	for rows.Next() {
		var i ListBillsRow
		if err := rows.Scan(&i.Amount, &i.CategoryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
