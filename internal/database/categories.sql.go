// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package database

import (
	"context"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categories (user_id, name)
VALUES ($1, $2)
`

type CreateCategoryParams struct {
	UserID string
	Name   string
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createCategory, arg.UserID, arg.Name)
	return err
}

const deleteCategoriesByUser = `-- name: DeleteCategoriesByUser :exec
DELETE FROM categories
WHERE user_id = $1
`

func (q *Queries) DeleteCategoriesByUser(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteCategoriesByUser, userID)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE user_id = $1
AND name = $2
`

type DeleteCategoryParams struct {
	UserID string
	Name   string
}

func (q *Queries) DeleteCategory(ctx context.Context, arg DeleteCategoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, arg.UserID, arg.Name)
	return err
}

const listCategories = `-- name: ListCategories :many
SELECT name
FROM categories
WHERE user_id = $1
`

func (q *Queries) ListCategories(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listCategories, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
